{
	"definition-part-2_key1": "Definitions\n",
	"definition-part-2_key2": "Binary Numbers\n",
	"definition-part-2_key3": "`Binary numbers` are known as machine language or low level language, binary numbers are made of 0 and 1 which humans cannot understand but computers can.\n",
	"definition-part-2_key4": "`Interpreter`\n",
	"definition-part-2_key5": "It checks the `code` line by line and the line at which `error` is present, `interpreter`  stops the `code` at that line and shows the name of `error`.\n`Interpreter`  converts high level language to low level language with the help of which the computer is able to run the `code`.\n",
	"definition-part-2_key6": "**`Interpreter` is used for `Python` and Ruby programming languages.**\n",
	"definition-part-2_key7": "Example :-\n",
	"definition-part-2_key8": "`Output` :-\n",
	"definition-part-2_key9": "`file \"<string>\",line 1, in <module>`\n",
	"definition-part-2_key10": "In  this example you saw that I have taken a `variable` named **a** and assigned/given  a `string` value to it but I forgot to put \" \"(quote). So, `python` was not able to identify the type of value I gave to the `variable` **a**. Therefore, the `interpreter` stopped the `code` at the line that contained `error`, and displayed the `error`.\n",
	"definition-part-2_key11": "`Compiler`\n",
	"definition-part-2_key12": "`Compiler` is a software that scans the complete `code` in one go and if the `code` contains any `error`, then it shows the `error` at the end of the `code`.\nWhereas the `interpreter`, stops the `code` at the line that contains `error`.\n",
	"definition-part-2_key13": "**`Compiler` is used in C and C++ programming languages.**\n",
	"definition-part-2_key14": "Note :\n",
	"definition-part-2_key16": "To study `Compiler` and `Interpreter` in detail please click this link.  ",
	"definition-part-2_key17": "`Compiler` and `Interpreter`",
	"definition-part-2_key18": " ",
	"definition-part-2_key19": "`Case Sensitive `\n",
	"definition-part-2_key20": "Case sensitive means that the text that we have typed should be exactly same as we type it anywhere in the `code`.\n",
	"definition-part-2_key21": "Example :-\n",
	"definition-part-2_key22": "`Output` :-\n",
	"definition-part-2_key23": "`Var is not defined`\n",
	"definition-part-2_key24": "For example ,in the above example ,we have assigned a  `variable` named **var** and while printing we typed **Var**, so an `error` was displayed because in `python` var and Var are different. In `python` small letters and capital letters are considered different.\n",
	"definition-part-2_key25": "Note- You can click this link to study  case sensitive in detail .\n",
	"definition-part-2_key26": "Case Sensitive\n",
	"definition-part-2_key27": "\n",
	"definition-part-2_key28": "`Error/ Bugs`\n",
	"definition-part-2_key29": "When we make any mistake while writing the `code`, that mistake is called `error`/bug.\n",
	"definition-part-2_key30": "Example :-\n",
	"definition-part-2_key31": "`Output` :-\n",
	"definition-part-2_key32": "`SyntaxError: unexpected EOF while parsing`\n",
	"definition-part-2_key33": "Example :-\n",
	"definition-part-2_key34": "`Output` :-\n",
	"definition-part-2_key35": "`SyntaxError: invalid syntax`\n",
	"definition-part-2_key36": "In this example you saw that while printing I forgot to put parenthesis so it showed us a `syntax` `error` which means our `code` has some mistake/`error`.\n",
	"definition-part-2_key37": "Debugs\n",
	"definition-part-2_key38": "Debug means to solve bug/`error` in the given `code` or removing the `error` from the `code` and writing the correct `code` which is as per the `syntax`.\n",
	"definition-part-2_key39": "Example :-\n",
	"definition-part-2_key40": "`Output` :-\n",
	"definition-part-2_key41": "`5`\n",
	"definition-part-2_key42": "Example :-\n",
	"definition-part-2_key43": "`Output` :-\n",
	"definition-part-2_key44": "`2`\n",
	"definition-part-2_key45": "As you saw in the bug example   there was a bug present in the second `code` so we debugged that `code`.\n",
	"definition-part-2_key46": "`Source code`\n",
	"definition-part-2_key47": "Source `code` is that `code` which humans can easily understand.\n",
	"definition-part-2_key48": "Example :-\n",
	"definition-part-2_key49": "`Output` :-\n",
	"definition-part-2_key50": "`python`\n",
	"definition-part-2_key51": "In this example you saw that we have taken a `variable` named as **name** and we have stored `python` in it.Ypu can easily read and understand this `code` .This `code` is called `source code/ main code`.\n"
}